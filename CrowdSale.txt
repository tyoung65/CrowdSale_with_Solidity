pragma solidity ^0.5.0;

import "./NewCoin.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/crowdsale/Crowdsale.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/crowdsale/emission/MintedCrowdsale.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/crowdsale/validation/CappedCrowdsale.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/crowdsale/validation/TimedCrowdsale.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/crowdsale/distribution/RefundablePostDeliveryCrowdsale.sol";

// @TODO: Inherit the crowdsale contracts
contract NewCoinSale is Crowdsale, TimedCrowdsale, MintedCrowdsale, CappedCrowdsale, RefundableCrowdsale {
    constructor(
        // @TODO: Fill in the constructor parameters!
        uint rate , // rate in TKNbits
        address payable wallet, // sale beneficiary
        NewCoin token, // the Token itself that the ArcadeTokenSale will work with
        uint goal,
        uint cap,
        uint openingTime,
        uint closingTime
    )
        // @TODO: Pass the constructor parameters to the crowdsale contracts.
        Crowdsale(rate, wallet, token)
        CappedCrowdsale(cap)
        RefundableCrowdsale(goal)
        TimedCrowdsale(openingTime, closingTime)
        public
    {
        // constructor can stay empty
    }
}

contract NewCoinSaleDeployer {

    address public NewCoin_sale_address;
    address public token_address;

    constructor(
        // @TODO: Fill in the constructor parameters!
        string memory name,
        string memory symbol,
        uint cap,
        uint goal,
        address payable wallet // this address will receive all Ether raised by the sale
    )
        public
    {
        // @TODO: create the PupperCoin and keep its address handy
        NewCoin token = new NewCoin(name, symbol, 0);
        token_address = address(token);
 


        // @TODO: create the PupperCoinSale and tell it about the token, set the goal, and set the open and close times to now and now + 24 weeks.
        NewCoinSale NewCoin_sale = new NewCoinSale(1, wallet, token, cap, goal, now, now + 24 hours);
        NewCoin_sale_address = address(NewCoin_sale); 

        // make the PupperCoinSale contract a minter, then have the PupperCoinSaleDeployer renounce its minter role
        token.addMinter(NewCoin_sale_address);
        token.renounceMinter();
    }
}
